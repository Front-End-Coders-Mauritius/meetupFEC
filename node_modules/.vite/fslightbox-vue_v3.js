import {
  require_vue
} from "./chunk-V2LPO4N6.js";
import "./chunk-AQK2X677.js";
import {
  __commonJS
} from "./chunk-3DB52H5I.js";

// node_modules/fslightbox-vue/v3.js
var require_v3 = __commonJS({
  "node_modules/fslightbox-vue/v3.js"(exports, module) {
    !function() {
      "use strict";
      var e = { 744: function(e2, t2) {
        t2.Z = (e3, t3) => {
          const o2 = e3.__vccOpts || e3;
          for (const [e4, n2] of t3)
            o2[e4] = n2;
          return o2;
        };
      } }, t = {};
      function o(n2) {
        var i = t[n2];
        if (i !== void 0)
          return i.exports;
        var s = t[n2] = { exports: {} };
        return e[n2](s, s.exports, o), s.exports;
      }
      o.d = function(e2, t2) {
        for (var n2 in t2)
          o.o(t2, n2) && !o.o(e2, n2) && Object.defineProperty(e2, n2, { enumerable: true, get: t2[n2] });
      }, o.o = function(e2, t2) {
        return Object.prototype.hasOwnProperty.call(e2, t2);
      }, o.r = function(e2) {
        typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
      };
      var n = {};
      !function() {
        o.r(n), o.d(n, { default: function() {
          return _e;
        } });
        var e2 = require_vue();
        const t2 = { key: 0, ref: "container", class: "fslightbox-container fslightbox-full-dimension fslightbox-fade-in-strong" }, i = "fslightbox-", s = "".concat(i, "styles"), r = "".concat(i, "cursor-grabbing"), c = "".concat(i, "open"), l = "".concat(i, "transform-transition"), a = "".concat(i, "fade-in"), d = "".concat(i, "fade-out"), u = a + "-strong", h = d + "-strong", p = "".concat(i, "opacity-"), g = "".concat(p, "1"), x = "".concat(i, "source");
        function f() {
          const e3 = document.createElement("style");
          e3.className = s, e3.appendChild(document.createTextNode(".fslightbox-absoluted{position:absolute;top:0;left:0}.fslightbox-fade-in{animation:fslightbox-fade-in .3s cubic-bezier(0, 0, 0.7, 1)}.fslightbox-fade-out{animation:fslightbox-fade-out .3s ease}.fslightbox-fade-in-strong{animation:fslightbox-fade-in-strong .3s cubic-bezier(0, 0, 0.7, 1)}.fslightbox-fade-out-strong{animation:fslightbox-fade-out-strong .3s ease}@keyframes fslightbox-fade-in{from{opacity:.65}to{opacity:1}}@keyframes fslightbox-fade-out{from{opacity:.35}to{opacity:0}}@keyframes fslightbox-fade-in-strong{from{opacity:.3}to{opacity:1}}@keyframes fslightbox-fade-out-strong{from{opacity:1}to{opacity:0}}.fslightbox-cursor-grabbing{cursor:grabbing}.fslightbox-full-dimension{width:100%;height:100%}.fslightbox-open{overflow:hidden;height:100%}.fslightbox-flex-centered{display:flex;justify-content:center;align-items:center}.fslightbox-opacity-0{opacity:0 !important}.fslightbox-opacity-1{opacity:1 !important}.fslightbox-scrollbarfix{padding-right:17px}.fslightbox-transform-transition{transition:transform .3s}.fslightbox-container{font-family:Arial,sans-serif;position:fixed;top:0;left:0;background:linear-gradient(rgba(30, 30, 30, 0.9), black 1810%);z-index:9999999;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.fslightbox-container *{box-sizing:border-box}.fslightbox-svg-path{transition:fill .15s ease;fill:#ddd}.fslightbox-nav{height:45px;width:100%;position:absolute;top:0;left:0}.fslightbox-slide-number-container{display:flex;justify-content:center;align-items:center;position:relative;height:100%;font-size:15px;color:#d7d7d7;z-index:0;max-width:55px;text-align:left}.fslightbox-slide-number-container .fslightbox-flex-centered{height:100%}.fslightbox-slash{display:block;margin:0 5px;width:1px;height:12px;transform:rotate(15deg);background:#fff}.fslightbox-toolbar{position:absolute;z-index:3;right:0;top:0;height:100%;display:flex;background:rgba(35,35,35,.65)}.fslightbox-toolbar-button{height:100%;width:45px;cursor:pointer}.fslightbox-toolbar-button:hover .fslightbox-svg-path{fill:#fff}.fslightbox-slide-btn-container{display:flex;align-items:center;padding:12px 12px 12px 6px;position:absolute;top:50%;cursor:pointer;z-index:3;transform:translateY(-50%)}@media(min-width: 476px){.fslightbox-slide-btn-container{padding:22px 22px 22px 6px}}@media(min-width: 768px){.fslightbox-slide-btn-container{padding:30px 30px 30px 6px}}.fslightbox-slide-btn-container:hover .fslightbox-svg-path{fill:#f1f1f1}.fslightbox-slide-btn{padding:9px;font-size:26px;background:rgba(35,35,35,.65)}@media(min-width: 768px){.fslightbox-slide-btn{padding:10px}}@media(min-width: 1600px){.fslightbox-slide-btn{padding:11px}}.fslightbox-slide-btn-previous-container{left:0}@media(max-width: 475.99px){.fslightbox-slide-btn-previous-container{padding-left:3px}}.fslightbox-slide-btn-next-container{right:0;padding-left:12px;padding-right:3px}@media(min-width: 476px){.fslightbox-slide-btn-next-container{padding-left:22px}}@media(min-width: 768px){.fslightbox-slide-btn-next-container{padding-left:30px}}@media(min-width: 476px){.fslightbox-slide-btn-next-container{padding-right:6px}}.fslightbox-down-event-detector{position:absolute;z-index:1}.fslightbox-slide-swiping-hoverer{z-index:4}.fslightbox-invalid-file-wrapper{font-size:22px;color:#eaebeb;margin:auto}.fslightbox-video{object-fit:cover}.fslightbox-loader{display:block;margin:auto;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);width:67px;height:67px}.fslightbox-loader div{box-sizing:border-box;display:block;position:absolute;width:54px;height:54px;margin:6px;border:5px solid;border-color:#999 transparent transparent transparent;border-radius:50%;animation:fslightbox-loader 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite}.fslightbox-loader div:nth-child(1){animation-delay:-0.45s}.fslightbox-loader div:nth-child(2){animation-delay:-0.3s}.fslightbox-loader div:nth-child(3){animation-delay:-0.15s}@keyframes fslightbox-loader{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}.fslightbox-source{position:relative;z-index:2;opacity:0;transform:translateZ(0);margin:auto;backface-visibility:hidden}")), document.head.appendChild(e3);
        }
        typeof document == "object" && f();
        const m = [], b = "fslightbox-types", v = "fslightbox-scrollbar-width";
        function S(e3) {
          let t3, { props: o2 } = e3, n2 = 0;
          const i2 = {};
          this.getSourceTypeFromLocalStorageByUrl = (e4) => t3[e4] ? t3[e4] : s2(e4), this.handleReceivedSourceTypeForUrl = (e4, o3) => {
            i2[o3] === false && (n2--, e4 !== "invalid" ? i2[o3] = e4 : delete i2[o3], n2 === 0 && (function(e5, t4) {
              for (let o4 in t4)
                e5[o4] = t4[o4];
            }(t3, i2), localStorage.setItem(b, JSON.stringify(t3))));
          };
          const s2 = (e4) => {
            n2++, i2[e4] = false;
          };
          o2.disableLocalStorage ? (this.getSourceTypeFromLocalStorageByUrl = function() {
          }, this.handleReceivedSourceTypeForUrl = function() {
          }) : (t3 = JSON.parse(localStorage.getItem(b)), t3 || (t3 = {}, this.getSourceTypeFromLocalStorageByUrl = s2));
        }
        const L = "image", y = "video", w = "youtube", I = "custom", C = "invalid";
        function k(e3) {
          const { componentsServices: { isLightboxOpenManager: t3, updateSourceDirectWrapperCollection: o2 }, elements: { sourcesComponents: n2 } } = e3;
          this.runActionsForSourceTypeAndIndex = (e4, i2) => {
            let s2;
            switch (e4) {
              case L:
                s2 = "Imager";
                break;
              case y:
                s2 = "Videor";
                break;
              case w:
                s2 = "Youtuber";
                break;
              case I:
                s2 = "Customer";
                break;
              default:
                s2 = "Invalider";
            }
            n2[i2] = s2, t3.get() && o2[i2]();
          };
        }
        function B() {
          const e3 = (e4) => {
            const t4 = document.createElement("a");
            return t4.href = e4, t4.hostname === "www.youtube.com";
          }, t3 = (e4) => e4.slice(0, e4.indexOf("/"));
          let o2, n2, i2;
          function s2() {
            if (i2.readyState === 4)
              return void n2(C);
            if (i2.readyState !== 2)
              return;
            let e4;
            switch (t3(i2.getResponseHeader("content-type"))) {
              case "image":
                e4 = L;
                break;
              case "video":
                e4 = y;
                break;
              default:
                e4 = C;
            }
            i2.onreadystatechange = null, i2.abort(), n2(e4);
          }
          this.setUrlToCheck = (e4) => {
            o2 = e4;
          }, this.getSourceType = (t4) => {
            if (e3(o2))
              return t4(w);
            n2 = t4, i2 = new XMLHttpRequest(), i2.onreadystatechange = s2, i2.open("GET", o2, true), i2.send();
          };
        }
        function F(e3, t3, o2) {
          let { props: { types: n2, type: i2, sources: s2 }, resolve: r2 } = e3;
          this.getTypeSetByClientForIndex = (e4) => {
            let t4;
            return n2 && n2[e4] ? t4 = n2[e4] : i2 && (t4 = i2), t4;
          }, this.retrieveTypeWithXhrForIndex = (e4) => {
            const n3 = r2(B);
            n3.setUrlToCheck(s2[e4]), n3.getSourceType((n4) => {
              t3.handleReceivedSourceTypeForUrl(n4, s2[e4]), o2.runActionsForSourceTypeAndIndex(n4, e4);
            });
          };
        }
        function N(e3, t3, o2) {
          for (let n2 = 0; n2 < e3.props.sources.length; n2++)
            e3.collections[t3][n2] = e3.resolve(o2, [n2]);
        }
        function A(e3, t3) {
          const o2 = e3.classList;
          o2.contains(t3) && o2.remove(t3);
        }
        function T(e3) {
          let { componentsServices: { isFullscreenOpenManager: t3, isLightboxOpenManager: o2 }, core: { eventsDispatcher: n2, fullscreenToggler: i2, globalEventsController: s2, scrollbarRecompensor: r2 }, elements: l2, props: a2, sourcePointerProps: d2, timeout: u2 } = e3;
          this.isLightboxFadingOut = false, this.runActions = () => {
            this.isLightboxFadingOut = true, l2.container.classList.add(h), s2.removeListeners(), a2.exitFullscreenOnClose && t3.get() && i2.exitFullscreen(), u2(() => {
              this.isLightboxFadingOut = false, d2.isPointering = false, l2.container.classList.remove(h), document.documentElement.classList.remove(c), r2.removeRecompense(), o2.set(false), n2.dispatch("onClose");
            }, 270);
          };
        }
        const z = "sourceMainWrappers";
        function E(e3) {
          let { core: { lightboxCloser: t3, fullscreenToggler: o2, slideChangeFacade: n2 } } = e3;
          this.listener = (e4) => {
            switch (e4.key) {
              case "Escape":
                t3.closeLightbox();
                break;
              case "ArrowLeft":
                n2.changeToPrevious();
                break;
              case "ArrowRight":
                n2.changeToNext();
                break;
              case "F11":
                e4.preventDefault(), o2.enterFullscreen();
            }
          };
        }
        function O(e3) {
          let { collections: { sourceMainWrapperTransformers: t3 }, componentsServices: o2, elements: n2, sourcePointerProps: i2, stageIndexes: s2 } = e3;
          this.runActionsForEvent = (e4) => {
            o2.showSlideSwipingHoverer(), n2.container.classList.add(r), i2.swipedX = e4.screenX - i2.downScreenX, c2(s2.current, "zero"), s2.previous !== void 0 && i2.swipedX > 0 ? c2(s2.previous, "negative") : s2.next !== void 0 && i2.swipedX < 0 && c2(s2.next, "positive");
          };
          const c2 = (e4, o3) => {
            t3[e4].byValue(i2.swipedX)[o3]();
          };
        }
        function W(e3) {
          let { props: { sources: t3 }, resolve: o2, sourcePointerProps: n2 } = e3;
          const i2 = o2(O);
          t3.length === 1 ? this.listener = () => {
            n2.swipedX = 1;
          } : this.listener = (e4) => {
            n2.isPointering && i2.runActionsForEvent(e4);
          };
        }
        function P(e3) {
          let { collections: { sourceMainWrapperTransformers: t3 }, core: { slideIndexChanger: o2 }, elements: { sourceMainWrappers: n2 }, stageIndexes: i2 } = e3;
          this.runPositiveSwipedXActions = () => {
            i2.previous === void 0 || (s2("positive"), o2.changeTo(i2.previous)), s2("zero");
          }, this.runNegativeSwipedXActions = () => {
            i2.next === void 0 || (s2("negative"), o2.changeTo(i2.next)), s2("zero");
          };
          const s2 = (e4) => {
            n2[i2.current].classList.add(l), t3[i2.current][e4]();
          };
        }
        function M(e3) {
          let { componentsServices: t3, core: { lightboxCloser: o2 }, elements: n2, resolve: i2, sourcePointerProps: s2 } = e3;
          const c2 = i2(P);
          this.runNoSwipeActions = () => {
            t3.hideSlideSwipingHoverer(), s2.isSourceDownEventTarget || o2.closeLightbox(), s2.isPointering = false;
          }, this.runActions = () => {
            s2.swipedX > 0 ? c2.runPositiveSwipedXActions() : c2.runNegativeSwipedXActions(), t3.hideSlideSwipingHoverer(), n2.container.classList.remove(r), s2.isPointering = false;
          };
        }
        function V(e3) {
          let { resolve: t3, sourcePointerProps: o2 } = e3;
          const n2 = t3(M);
          this.listener = () => {
            o2.isPointering && (o2.swipedX ? n2.runActions() : n2.runNoSwipeActions());
          };
        }
        function D(e3, t3, o2, n2) {
          let { data: i2, elements: { sources: s2 } } = e3;
          const r2 = o2 / n2;
          let c2 = 0;
          this.adjustSize = () => {
            if (c2 = i2.maxSourceWidth / r2, c2 < i2.maxSourceHeight)
              return o2 < i2.maxSourceWidth && (c2 = n2), l2();
            c2 = n2 > i2.maxSourceHeight ? i2.maxSourceHeight : n2, l2();
          };
          const l2 = () => {
            const e4 = s2[t3].style;
            e4.width = c2 * r2 + "px", e4.height = c2 + "px";
          };
        }
        function H(e3, t3) {
          let { collections: { sourceSizers: o2 }, componentsServices: { hideSourceLoaderCollection: n2 }, elements: { sourceAnimationWrappers: i2, sources: s2 }, resolve: r2 } = e3;
          function c2(e4, n3) {
            o2[t3] = r2(D, [t3, e4, n3]), o2[t3].adjustSize();
          }
          this.runActions = (e4, o3) => {
            s2[t3].classList.add(g), i2[t3].classList.add(u), n2[t3](), c2(e4, o3), this.runActions = c2;
          };
        }
        function R(e3, t3) {
          let { elements: { sources: o2 }, props: n2, resolve: i2, timeout: s2 } = e3;
          const r2 = i2(H, [t3]);
          let c2;
          this.handleImageLoad = (e4) => {
            let { target: { naturalWidth: t4, naturalHeight: o3 } } = e4;
            r2.runActions(t4, o3);
          }, this.handleVideoLoad = (e4) => {
            let { target: { videoWidth: t4, videoHeight: o3 } } = e4;
            c2 = true, r2.runActions(t4, o3);
          }, this.handleNotMetaDatedVideoLoad = () => {
            c2 || this.handleYoutubeLoad();
          }, this.handleYoutubeLoad = () => {
            let e4 = 1920, t4 = 1080;
            n2.maxYoutubeVideoDimensions && (e4 = n2.maxYoutubeVideoDimensions.width, t4 = n2.maxYoutubeVideoDimensions.height), r2.runActions(e4, t4);
          }, this.handleCustomLoad = () => {
            s2(() => {
              const e4 = o2[t3];
              r2.runActions(e4.offsetWidth, e4.offsetHeight);
            });
          };
        }
        function U(e3, t3) {
          let { elements: { sourceMainWrappers: o2 }, props: { slideDistance: n2 } } = e3;
          const i2 = n2 + 1;
          let s2 = 0;
          this.byValue = (e4) => (s2 = e4, this), this.negative = () => {
            r2(-c2());
          }, this.zero = () => {
            r2(0);
          }, this.positive = () => {
            r2(c2());
          };
          const r2 = (e4) => {
            o2[t3].style.transform = "translateX(".concat(e4 + s2, "px)"), s2 = 0;
          }, c2 = () => i2 * innerWidth;
        }
        function X(e3) {
          const { componentsServices: { isLightboxOpenManager: t3 }, core: { eventsDispatcher: o2, lightboxOpener: n2, lightboxOpenActioner: i2 }, data: s2 } = e3;
          n2.openLightbox = () => {
            N(e3, "sourceLoadHandlers", R), o2.dispatch("onShow"), t3.set(true, i2.runInitializedLightboxActions);
          }, n2.initializeAndOpenLightbox = () => {
            s2.isInitialized = true, N(e3, "sourceLoadHandlers", R), N(e3, "sourceMainWrapperTransformers", U), function(e4) {
              !function(e5) {
                let { core: { classFacade: t4 }, elements: o3 } = e5;
                t4.removeFromEachElementClassIfContains = (e6, t5) => {
                  for (let n3 = 0; n3 < o3[e6].length; n3++)
                    A(o3[e6][n3], t5);
                };
              }(e4), function(e5) {
                let { core: { eventsDispatcher: t4 }, props: o3 } = e5;
                t4.dispatch = (e6) => {
                  o3[e6] && o3[e6]();
                };
              }(e4), function(e5) {
                let { componentsServices: { isFullscreenOpenManager: t4 }, core: { fullscreenToggler: o3 } } = e5;
                o3.enterFullscreen = () => {
                  t4.set(true);
                  const e6 = document.documentElement;
                  e6.requestFullscreen ? e6.requestFullscreen() : e6.mozRequestFullScreen ? e6.mozRequestFullScreen() : e6.webkitRequestFullscreen ? e6.webkitRequestFullscreen() : e6.msRequestFullscreen && e6.msRequestFullscreen();
                }, o3.exitFullscreen = () => {
                  t4.set(false), document.exitFullscreen ? document.exitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.msExitFullscreen && document.msExitFullscreen();
                };
              }(e4), function(e5) {
                let { core: { globalEventsController: t4, windowResizeActioner: o3 }, resolve: n3 } = e5;
                const i3 = n3(E), s3 = n3(W), r2 = n3(V);
                t4.attachListeners = () => {
                  document.addEventListener("pointermove", s3.listener), document.addEventListener("pointerup", r2.listener), addEventListener("resize", o3.runActions), document.addEventListener("keydown", i3.listener);
                }, t4.removeListeners = () => {
                  document.removeEventListener("pointermove", s3.listener), document.removeEventListener("pointerup", r2.listener), removeEventListener("resize", o3.runActions), document.removeEventListener("keydown", i3.listener);
                };
              }(e4), function(e5) {
                let { core: { lightboxCloser: t4 }, resolve: o3 } = e5;
                const n3 = o3(T);
                t4.closeLightbox = () => {
                  n3.isLightboxFadingOut || n3.runActions();
                };
              }(e4), function(e5) {
                const { collections: { sourceMainWrapperTransformers: t4 }, core: { eventsDispatcher: o3, lightboxOpenActioner: n3, globalEventsController: i3, scrollbarRecompensor: s3, sourceDisplayFacade: r2, stageManager: l2, windowResizeActioner: a2 }, stageIndexes: d2 } = e5;
                n3.runInitializedLightboxActions = () => {
                  l2.updateStageIndexes(), r2.displaySourcesWhichShouldBeDisplayed(), document.documentElement.classList.add(c), s3.addRecompense(), i3.attachListeners(), a2.runActions(), t4[d2.current].zero(), o3.dispatch("onOpen");
                };
              }(e4), function(e5) {
                let { data: t4, core: { scrollbarRecompensor: o3 } } = e5;
                o3.addRecompense = () => {
                  document.readyState === "complete" ? n3() : window.addEventListener("load", () => {
                    n3(), o3.addRecompense = n3;
                  });
                };
                const n3 = () => {
                  document.body.offsetHeight > window.innerHeight && (document.body.style.marginRight = t4.scrollbarWidth + "px");
                };
                o3.removeRecompense = () => {
                  document.body.style.removeProperty("margin-right");
                };
              }(e4), function(e5) {
                let { core: { slideChangeFacade: t4, slideIndexChanger: o3, stageManager: n3 }, props: { sources: i3 } } = e5;
                i3.length > 1 ? (t4.changeToPrevious = () => {
                  o3.jumpTo(n3.getPreviousSlideIndex());
                }, t4.changeToNext = () => {
                  o3.jumpTo(n3.getNextSlideIndex());
                }) : (t4.changeToPrevious = () => {
                }, t4.changeToNext = () => {
                });
              }(e4), function(e5) {
                let { collections: { sourceMainWrapperTransformers: t4 }, componentsServices: o3, core: { classFacade: n3, slideIndexChanger: i3, sourceDisplayFacade: s3, stageManager: r2 }, elements: { sourceAnimationWrappers: c2 }, getQueuedAction: h2, stageIndexes: p2, timeout: g2 } = e5;
                const x2 = h2(() => {
                  n3.removeFromEachElementClassIfContains("sourceAnimationWrappers", d);
                }, 300);
                i3.changeTo = (e6) => {
                  p2.current = e6, r2.updateStageIndexes(), o3.setSlideNumber(e6 + 1), s3.displaySourcesWhichShouldBeDisplayed();
                }, i3.jumpTo = (e6) => {
                  let o4 = p2.current;
                  i3.changeTo(e6), n3.removeFromEachElementClassIfContains(z, l), A(c2[o4], u), A(c2[o4], a), c2[o4].classList.add(d), A(c2[e6], u), A(c2[e6], d), c2[e6].classList.add(a), x2(), t4[e6].zero(), g2(() => {
                    o4 !== p2.current && t4[o4].negative();
                  }, 270);
                };
              }(e4), function(e5) {
                let { core: { classFacade: t4, sourcesPointerDown: o3 }, elements: { sources: n3 }, sourcePointerProps: i3, stageIndexes: s3 } = e5;
                o3.listener = (e6) => {
                  e6.target.tagName !== "VIDEO" && e6.preventDefault(), i3.isPointering = true, i3.downScreenX = e6.screenX, i3.swipedX = 0;
                  const o4 = n3[s3.current];
                  o4 && o4.contains(e6.target) ? i3.isSourceDownEventTarget = true : i3.isSourceDownEventTarget = false, t4.removeFromEachElementClassIfContains(z, l);
                };
              }(e4), function(e5) {
                let { core: { sourceDisplayFacade: t4 }, componentsServices: { updateSourceDirectWrapperCollection: o3 }, stageIndexes: n3, props: { loadOnlyCurrentSource: i3 } } = e5;
                t4.displaySourcesWhichShouldBeDisplayed = () => {
                  if (i3)
                    o3[n3.current]();
                  else
                    for (let e6 in n3)
                      n3[e6] !== void 0 && o3[n3[e6]]();
                };
              }(e4), function(e5) {
                let { core: { stageManager: t4 }, props: { sources: o3 }, stageIndexes: n3 } = e5;
                const i3 = o3.length - 1;
                t4.getPreviousSlideIndex = () => n3.current === 0 ? i3 : n3.current - 1, t4.getNextSlideIndex = () => n3.current === i3 ? 0 : n3.current + 1, t4.updateStageIndexes = i3 === 0 ? () => {
                } : i3 === 1 ? () => {
                  n3.current === 0 ? (n3.next = 1, delete n3.previous) : (n3.previous = 0, delete n3.next);
                } : () => {
                  n3.previous = t4.getPreviousSlideIndex(), n3.next = t4.getNextSlideIndex();
                }, t4.isSourceInStage = i3 <= 2 ? () => true : (e6) => {
                  const t5 = n3.current;
                  if (t5 === 0 && e6 === i3 || t5 === i3 && e6 === 0)
                    return true;
                  const o4 = t5 - e6;
                  return o4 === -1 || o4 === 0 || o4 === 1;
                };
              }(e4), function(e5) {
                let { collections: { sourceMainWrapperTransformers: t4, sourceSizers: o3 }, core: { windowResizeActioner: n3 }, data: i3, elements: { sourceMainWrappers: s3 }, props: { sources: r2 }, stageIndexes: c2 } = e5;
                n3.runActions = () => {
                  innerWidth < 992 ? i3.maxSourceWidth = innerWidth : i3.maxSourceWidth = 0.9 * innerWidth, i3.maxSourceHeight = 0.9 * innerHeight;
                  for (let e6 = 0; e6 < r2.length; e6++)
                    A(s3[e6], l), e6 !== c2.current && t4[e6].negative(), o3[e6] && o3[e6].adjustSize();
                };
              }(e4);
            }(e3), o2.dispatch("onInit"), t3.set(true, () => {
              i2.runInitializedLightboxActions(), function(e4) {
                let { props: { sources: t4 }, resolve: o3 } = e4;
                const n3 = o3(S), i3 = o3(k), s3 = o3(F, [n3, i3]);
                for (let e5 = 0; e5 < t4.length; e5++) {
                  if (typeof t4[e5] != "string") {
                    i3.runActionsForSourceTypeAndIndex(I, e5);
                    continue;
                  }
                  const o4 = s3.getTypeSetByClientForIndex(e5);
                  if (o4) {
                    i3.runActionsForSourceTypeAndIndex(o4, e5);
                    continue;
                  }
                  const r2 = n3.getSourceTypeFromLocalStorageByUrl(t4[e5]);
                  r2 ? i3.runActionsForSourceTypeAndIndex(r2, e5) : s3.retrieveTypeWithXhrForIndex(e5);
                }
              }(e3);
            });
          };
        }
        function Z(e3) {
          let { componentsServices: { isLightboxOpenManager: t3 }, core: { slideIndexChanger: o2 }, stageIndexes: n2 } = e3;
          this.runCurrentStageIndexUpdateActionsFor = (e4) => {
            e4 !== n2.current && (t3.get() ? o2.jumpTo(e4) : n2.current = e4);
          };
        }
        function j(e3) {
          var t3 = this;
          this.props = e3, this.data = { isInitialized: false, isFullyRendered: false, maxSourceWidth: 0, maxSourceHeight: 0, scrollbarWidth: 0 }, this.sourcePointerProps = { isPointering: false, downScreenX: null, isSourceDownEventTarget: false, swipedX: 0 }, this.stageIndexes = { current: 0 }, this.componentsServices = { isLightboxOpenManager: {}, setSlideNumber: null, isFullscreenOpenManager: {}, hideSourceLoaderCollection: [], updateSourceDirectWrapperCollection: [], showSlideSwipingHoverer: null, hideSlideSwipingHoverer: null }, this.elements = { container: null, sourceWrappersContainer: null, sources: [], sourceMainWrappers: [], sourceAnimationWrappers: [], sourcesComponents: [] }, this.collections = { sourceMainWrapperTransformers: [], sourceLoadHandlers: [], sourceSizers: [], xhrs: [] }, this.core = { classFacade: {}, eventsDispatcher: {}, fullscreenToggler: {}, globalEventsController: {}, lightboxCloser: {}, lightboxOpener: {}, lightboxOpenActioner: {}, lightboxUpdater: {}, scrollbarRecompensor: {}, slideChangeFacade: {}, slideIndexChanger: {}, sourcesPointerDown: {}, sourceDisplayFacade: {}, stageManager: {}, windowResizeActioner: {} }, this.getQueuedAction = (e4, t4) => {
            const o2 = [];
            return () => {
              o2.push(true), this.timeout(() => {
                o2.pop(), o2.length || e4();
              }, t4);
            };
          }, this.resolve = function(e4) {
            let o2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
            return o2.unshift(t3), new e4(...o2);
          }, this.timeout = (e4, t4) => {
            setTimeout(() => {
              this.elements.container && e4();
            }, t4);
          }, function(e4) {
            const { componentsServices: { isLightboxOpenManager: t4 }, core: { lightboxCloser: o2, lightboxOpener: n2, lightboxUpdater: i2 }, data: s2, resolve: r2 } = e4, c2 = r2(Z);
            i2.handleSlideProp = () => {
              const t5 = e4.props;
              typeof t5.sourceIndex == "number" ? c2.runCurrentStageIndexUpdateActionsFor(t5.sourceIndex) : typeof t5.source == "string" ? c2.runCurrentStageIndexUpdateActionsFor(t5.sources.indexOf(t5.source)) : typeof t5.slide == "number" && c2.runCurrentStageIndexUpdateActionsFor(t5.slide - 1);
            }, i2.handleTogglerUpdate = () => {
              t4.get() ? o2.closeLightbox() : s2.isInitialized ? n2.openLightbox() : n2.initializeAndOpenLightbox();
            };
          }(this), X(this);
        }
        const $ = { ref: "nav", class: "fslightbox-nav" }, q = { class: "fslightbox-toolbar" }, Y = ["title"], _ = ["width", "height", "viewBox"], J = ["d"];
        var Q = { props: { size: String, viewBox: String, d: String } }, G = o(744), K = (0, G.Z)(Q, [["render", function(t3, o2, n2, i2, s2, r2) {
          return (0, e2.openBlock)(), (0, e2.createElementBlock)("svg", { width: n2.size, height: n2.size, viewBox: n2.viewBox, xmlns: "http://www.w3.org/2000/svg" }, [(0, e2.createElementVNode)("path", { class: "fslightbox-svg-path", d: n2.d }, null, 8, J)], 8, _);
        }]]), ee = { components: { Svger: K }, props: { onClick: Function, size: String, viewBox: String, d: String, title: String } };
        const te = (0, G.Z)(ee, [["render", function(t3, o2, n2, i2, s2, r2) {
          const c2 = (0, e2.resolveComponent)("Svger");
          return (0, e2.openBlock)(), (0, e2.createElementBlock)("div", { onClick: o2[0] || (o2[0] = function() {
            return n2.onClick && n2.onClick(...arguments);
          }), title: n2.title, class: "fslightbox-toolbar-button fslightbox-flex-centered" }, [(0, e2.createVNode)(c2, { size: n2.size, "view-box": n2.viewBox, d: n2.d }, null, 8, ["size", "view-box", "d"])], 8, Y);
        }]]);
        var oe = te, ne = { components: { ToolbarButton: oe }, props: { fsLightboxIndex: Number }, data() {
          return { onClick: m[this.fsLightboxIndex].core.lightboxCloser.closeLightbox };
        } }, ie = (0, G.Z)(ne, [["render", function(t3, o2, n2, i2, s2, r2) {
          const c2 = (0, e2.resolveComponent)("ToolbarButton");
          return (0, e2.openBlock)(), (0, e2.createBlock)(c2, { "on-click": s2.onClick, "view-box": "0 0 24 24", size: "20px", d: "M 4.7070312 3.2929688 L 3.2929688 4.7070312 L 10.585938 12 L 3.2929688 19.292969 L 4.7070312 20.707031 L 12 13.414062 L 19.292969 20.707031 L 20.707031 19.292969 L 13.414062 12 L 20.707031 4.7070312 L 19.292969 3.2929688 L 12 10.585938 L 4.7070312 3.2929688 z", title: "Close" }, null, 8, ["on-click"]);
        }]]), se = { components: { ToolbarButton: oe }, props: { fsLightboxIndex: Number }, data: () => ({ isFullscreenOpen: false }), methods: { getButtonData(e3) {
          const { core: { fullscreenToggler: { exitFullscreen: t3, enterFullscreen: o2 } } } = m[this.fsLightboxIndex];
          return (this.isFullscreenOpen ? { onClick: t3, viewBox: "0 0 950 1024", size: "24px", d: "M682 342h128v84h-212v-212h84v128zM598 810v-212h212v84h-128v128h-84zM342 342v-128h84v212h-212v-84h128zM214 682v-84h212v212h-84v-128h-128z", title: "Exit fullscreen" } : { onClick: o2, viewBox: "0 0 18 18", size: "20px", d: "M4.5 11H3v4h4v-1.5H4.5V11zM3 7h1.5V4.5H7V3H3v4zm10.5 6.5H11V15h4v-4h-1.5v2.5zM11 3v1.5h2.5V7H15V3h-4z", title: "Enter fullscreen" })[e3];
        } }, created() {
          const e3 = m[this.fsLightboxIndex].componentsServices.isFullscreenOpenManager;
          e3.get = () => this.isFullscreenOpen, e3.set = (e4) => this.isFullscreenOpen = e4;
        } }, re = { components: { FullscreenButton: (0, G.Z)(se, [["render", function(t3, o2, n2, i2, s2, r2) {
          const c2 = (0, e2.resolveComponent)("ToolbarButton");
          return (0, e2.openBlock)(), (0, e2.createBlock)(c2, { "on-click": r2.getButtonData("onClick"), "view-box": r2.getButtonData("viewBox"), size: r2.getButtonData("size"), d: r2.getButtonData("d"), title: r2.getButtonData("title") }, null, 8, ["on-click", "view-box", "size", "d", "title"]);
        }]]), CloseButton: ie }, props: { fsLightboxIndex: Number } }, ce = (0, G.Z)(re, [["render", function(t3, o2, n2, i2, s2, r2) {
          const c2 = (0, e2.resolveComponent)("FullscreenButton"), l2 = (0, e2.resolveComponent)("CloseButton");
          return (0, e2.openBlock)(), (0, e2.createElementBlock)("div", q, [(0, e2.createVNode)(c2, { "fs-lightbox-index": n2.fsLightboxIndex }, null, 8, ["fs-lightbox-index"]), (0, e2.createVNode)(l2, { "fs-lightbox-index": n2.fsLightboxIndex }, null, 8, ["fs-lightbox-index"])]);
        }]]);
        const le = { ref: "source-outer", class: "fslightbox-slide-number-container" }, ae = { ref: "source-inner", class: "fslightbox-flex-centered" }, de = { "data-test-id": "slide-number" }, ue = (0, e2.createElementVNode)("span", { class: "fslightbox-slash" }, null, -1);
        var he = { props: { fsLightboxIndex: Number }, data() {
          return { slide: m[this.fsLightboxIndex].stageIndexes.current + 1, sourcesCount: m[this.fsLightboxIndex].props.sources.length };
        }, created() {
          m[this.fsLightboxIndex].componentsServices.setSlideNumber = (e3) => this.slide = e3;
        }, mounted() {
          this.$refs["source-inner"].offsetWidth > 55 && (this.$refs["source-outer"].style.justifyContent = "flex-start");
        } }, pe = { components: { SlideNumber: (0, G.Z)(he, [["render", function(t3, o2, n2, i2, s2, r2) {
          return (0, e2.openBlock)(), (0, e2.createElementBlock)("div", le, [(0, e2.createElementVNode)("div", ae, [(0, e2.createElementVNode)("span", de, (0, e2.toDisplayString)(s2.slide), 1), ue, (0, e2.createElementVNode)("span", null, (0, e2.toDisplayString)(s2.sourcesCount), 1)], 512)], 512);
        }]]), Toolbar: ce }, props: { fsLightboxIndex: Number }, data() {
          return { hasMoreThanSource: m[this.fsLightboxIndex].props.sources.length > 1 };
        } }, ge = (0, G.Z)(pe, [["render", function(t3, o2, n2, i2, s2, r2) {
          const c2 = (0, e2.resolveComponent)("Toolbar"), l2 = (0, e2.resolveComponent)("SlideNumber");
          return (0, e2.openBlock)(), (0, e2.createElementBlock)("div", $, [(0, e2.createVNode)(c2, { "fs-lightbox-index": n2.fsLightboxIndex }, null, 8, ["fs-lightbox-index"]), s2.hasMoreThanSource ? ((0, e2.openBlock)(), (0, e2.createBlock)(l2, { key: 0, "fs-lightbox-index": n2.fsLightboxIndex }, null, 8, ["fs-lightbox-index"])) : (0, e2.createCommentVNode)("v-if", true)], 512);
        }]]);
        const xe = { "data-test-class": "source-main-wrapper", ref: "ref", class: "fslightbox-absoluted fslightbox-full-dimension fslightbox-flex-centered" }, fe = { ref: "ref", class: "soueouoeu" }, me = ["src"];
        var be = { props: { fsLightboxIndex: Number, i: Number }, data() {
          const { collections: { sourceLoadHandlers: e3 }, props: { customAttributes: t3, sources: o2 } } = m[this.fsLightboxIndex];
          return { onLoad: (t4) => {
            e3[this.i].handleImageLoad(t4);
          }, src: o2[this.i], customAttributes: t3 && t3[this.i] };
        }, mounted() {
          m[this.fsLightboxIndex].elements.sources[this.i] = this.$refs.ref;
        } };
        const ve = (0, G.Z)(be, [["render", function(t3, o2, n2, i2, s2, r2) {
          return (0, e2.openBlock)(), (0, e2.createElementBlock)("img", (0, e2.mergeProps)({ class: "fslightbox-source", onLoad: o2[0] || (o2[0] = function() {
            return s2.onLoad && s2.onLoad(...arguments);
          }), ref: "ref", src: s2.src }, s2.customAttributes), null, 16, me);
        }]]);
        var Se = ve;
        const Le = ["src"];
        var ye = { props: { fsLightboxIndex: Number, i: Number }, data() {
          const { collections: { sourceLoadHandlers: e3 }, props: { customAttributes: t3, sources: o2 } } = m[this.fsLightboxIndex];
          return { onLoad: e3[this.i].handleVideoLoad, src: o2[this.i], customAttributes: t3 && t3[this.i] };
        }, mounted() {
          m[this.fsLightboxIndex].elements.sources[this.i] = this.$refs.ref;
        } };
        const we = (0, G.Z)(ye, [["render", function(t3, o2, n2, i2, s2, r2) {
          return (0, e2.openBlock)(), (0, e2.createElementBlock)("video", (0, e2.mergeProps)({ class: "fslightbox-source fslightbox-video", onLoadedmetadata: o2[0] || (o2[0] = function() {
            return s2.onLoad && s2.onLoad(...arguments);
          }), ref: "ref", controls: "" }, s2.customAttributes), [(0, e2.createElementVNode)("source", { src: s2.src }, null, 8, Le)], 16);
        }]]), Ie = ["src"];
        var Ce = { props: { fsLightboxIndex: Number, i: Number }, data() {
          const { props: { customAttributes: e3, sources: t3 } } = m[this.fsLightboxIndex];
          return { src: "https://www.youtube.com/embed/".concat((o2 = t3[this.i], o2.match(/^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/)[2]), "?enablejsapi=1"), customAttributes: e3 && e3[this.i] };
          var o2;
        }, mounted() {
          const { collections: { sourceLoadHandlers: e3 }, elements: { sources: t3 } } = m[this.fsLightboxIndex];
          t3[this.i] = this.$refs.ref, e3[this.i].handleYoutubeLoad();
        } }, ke = { props: { fsLightboxIndex: Number, i: Number }, data() {
          const e3 = m[this.fsLightboxIndex].props.sources[this.i], t3 = { component: e3, componentProps: {} };
          return e3.component && (t3.component = e3.component, t3.componentProps = e3.props), t3;
        }, mounted() {
          const { collections: { sourceLoadHandlers: e3 }, elements: { sources: t3 } } = m[this.fsLightboxIndex];
          t3[this.i] = this.$refs.ref.$el, t3[this.i].classList.add(x), e3[this.i].handleCustomLoad();
        } };
        const Be = { class: "fslightbox-invalid-file-wrapper fslightbox-flex-centered" };
        var Fe = { props: { fsLightboxIndex: Number, i: Number }, mounted() {
          const { componentsServices: { hideSourceLoaderCollection: e3 }, elements: { sourceMainWrappers: t3 } } = m[this.fsLightboxIndex];
          e3[this.i](), t3[this.i].classList.add(u);
        } }, Ne = { props: { fsLightboxIndex: Number, i: Number }, components: { Imager: Se, Videor: we, Youtuber: (0, G.Z)(Ce, [["render", function(t3, o2, n2, i2, s2, r2) {
          return (0, e2.openBlock)(), (0, e2.createElementBlock)("iframe", (0, e2.mergeProps)({ class: "fslightbox-source fslightbox-youtube-iframe", ref: "ref", src: s2.src, allowfullscreen: "" }, s2.customAttributes), null, 16, Ie);
        }]]), Customer: (0, G.Z)(ke, [["render", function(t3, o2, n2, i2, s2, r2) {
          return (0, e2.openBlock)(), (0, e2.createBlock)((0, e2.resolveDynamicComponent)(t3.component), (0, e2.mergeProps)(t3.componentProps, { ref: "ref" }), null, 16);
        }]]), Invalider: (0, G.Z)(Fe, [["render", function(t3, o2, n2, i2, s2, r2) {
          return (0, e2.openBlock)(), (0, e2.createElementBlock)("div", Be, " Invalid source ");
        }]]) }, data() {
          const e3 = {};
          return this.attachComponentDataToObject(e3), e3;
        }, created() {
          m[this.fsLightboxIndex].componentsServices.updateSourceDirectWrapperCollection[this.i] = () => {
            this.attachComponentDataToObject(this);
          };
        }, mounted() {
          m[this.fsLightboxIndex].elements.sourceAnimationWrappers[this.i] = this.$refs.ref;
        }, methods: { attachComponentDataToObject: function(e3) {
          const { core: { stageManager: { isSourceInStage: t3 } }, elements: { sourcesComponents: o2 }, props: { loadOnlyCurrentSource: n2 }, stageIndexes: { current: i2 } } = m[this.fsLightboxIndex];
          e3.sourceComponent = o2[this.i], e3.isSourceInStage = t3(this.i), e3.current = i2, e3.loadOnlyCurrentSource = n2;
        } } }, Ae = (0, G.Z)(Ne, [["render", function(t3, o2, n2, i2, s2, r2) {
          return (0, e2.openBlock)(), (0, e2.createElementBlock)("div", fe, [t3.current === n2.i || !t3.loadOnlyCurrentSource && t3.isSourceInStage ? ((0, e2.openBlock)(), (0, e2.createBlock)((0, e2.resolveDynamicComponent)(t3.sourceComponent), { key: 0, "fs-lightbox-index": n2.fsLightboxIndex, i: n2.i }, null, 8, ["fs-lightbox-index", "i"])) : (0, e2.createCommentVNode)("v-if", true)], 512);
        }]]);
        const Te = { class: "fslightbox-loader" }, ze = [(0, e2.createElementVNode)("div", null, null, -1), (0, e2.createElementVNode)("div", null, null, -1), (0, e2.createElementVNode)("div", null, null, -1), (0, e2.createElementVNode)("div", null, null, -1)], Ee = {};
        var Oe = { props: { fsLightboxIndex: Number, i: Number }, components: { SourceAnimationWrapper: Ae, Loader: (0, G.Z)(Ee, [["render", function(t3, o2) {
          return (0, e2.openBlock)(), (0, e2.createElementBlock)("div", Te, ze);
        }]]) }, data: () => ({ isSourceLoaded: false }), created() {
          m[this.fsLightboxIndex].componentsServices.hideSourceLoaderCollection[this.i] = () => this.isSourceLoaded = true;
        }, mounted() {
          m[this.fsLightboxIndex].elements.sourceMainWrappers[this.i] = this.$refs.ref;
        } }, We = { props: { fsLightboxIndex: Number }, components: { SourceMainWrapper: (0, G.Z)(Oe, [["render", function(t3, o2, n2, i2, s2, r2) {
          const c2 = (0, e2.resolveComponent)("SourceAnimationWrapper"), l2 = (0, e2.resolveComponent)("Loader");
          return (0, e2.openBlock)(), (0, e2.createElementBlock)("div", xe, [(0, e2.createVNode)(c2, { "fs-lightbox-index": n2.fsLightboxIndex, i: n2.i }, null, 8, ["fs-lightbox-index", "i"]), s2.isSourceLoaded ? (0, e2.createCommentVNode)("v-if", true) : ((0, e2.openBlock)(), (0, e2.createBlock)(l2, { key: 0 }))], 512);
        }]]) }, data() {
          const { core: { sourcesPointerDown: { listener: e3 } }, props: { sources: t3 } } = m[this.fsLightboxIndex];
          return { sources: t3, listener: e3 };
        }, mounted() {
          m[this.fsLightboxIndex].elements.sourceWrappersContainer = this.$refs.ref;
        } };
        const Pe = (0, G.Z)(We, [["render", function(t3, o2, n2, i2, s2, r2) {
          const c2 = (0, e2.resolveComponent)("SourceMainWrapper");
          return (0, e2.openBlock)(), (0, e2.createElementBlock)("div", { "data-test-id": "source-wrappers-container", class: "fslightbox-absoluted fslightbox-full-dimension", ref: "ref", onPointerdown: o2[0] || (o2[0] = function() {
            return s2.listener && s2.listener(...arguments);
          }) }, [((0, e2.openBlock)(true), (0, e2.createElementBlock)(e2.Fragment, null, (0, e2.renderList)(s2.sources.length, (t4, o3) => ((0, e2.openBlock)(), (0, e2.createBlock)(c2, { key: o3, i: o3, "fs-lightbox-index": n2.fsLightboxIndex }, null, 8, ["i", "fs-lightbox-index"]))), 128))], 544);
        }]]);
        var Me = Pe;
        const Ve = { key: 0 }, De = ["title"], He = { class: "fslightbox-slide-btn fslightbox-flex-centered" };
        var Re = { components: { Svger: K }, props: { onClick: Function, name: String, d: String }, data() {
          const e3 = this.name.charAt(0).toUpperCase() + this.name.slice(1);
          return { title: "".concat(e3, " slide") };
        } };
        const Ue = (0, G.Z)(Re, [["render", function(t3, o2, n2, i2, s2, r2) {
          const c2 = (0, e2.resolveComponent)("Svger");
          return (0, e2.openBlock)(), (0, e2.createElementBlock)("div", { class: (0, e2.normalizeClass)("fslightbox-slide-btn-container fslightbox-slide-btn-".concat(n2.name, "-container")), title: s2.title, onClick: o2[0] || (o2[0] = function() {
            return n2.onClick && n2.onClick(...arguments);
          }) }, [(0, e2.createElementVNode)("div", He, [(0, e2.createVNode)(c2, { "view-box": "0 0 20 20", size: "20px", d: n2.d }, null, 8, ["d"])])], 10, De);
        }]]);
        var Xe = { props: { fsLightboxIndex: Number }, components: { SlideButton: Ue }, data() {
          const { core: { slideChangeFacade: { changeToPrevious: e3, changeToNext: t3 } }, props: { sources: o2 } } = m[this.fsLightboxIndex];
          return { sourcesCount: o2.length, changeToPrevious: e3, changeToNext: t3 };
        } };
        const Ze = { key: 0, class: "fslightbox-slide-swiping-hoverer fslightbox-full-dimension fslightbox-absoluted" };
        var je = { props: { fsLightboxIndex: Number }, data: () => ({ isSlideSwipingHovererShown: false }), created() {
          const { componentsServices: e3 } = m[this.fsLightboxIndex];
          e3.showSlideSwipingHoverer = () => {
            this.isSlideSwipingHovererShown || (this.isSlideSwipingHovererShown = true);
          }, e3.hideSlideSwipingHoverer = () => {
            this.isSlideSwipingHovererShown && (this.isSlideSwipingHovererShown = false);
          };
        } };
        function $e(e3) {
          const { core: { lightboxOpener: t3 }, data: o2, props: { openOnMount: n2 } } = e3;
          document.getElementsByClassName(s).length || f(), o2.scrollbarWidth = function(e4) {
            let { props: { disableLocalStorage: t4 } } = e4;
            if (!t4) {
              const e5 = localStorage.getItem(v);
              if (e5)
                return e5;
            }
            const o3 = function() {
              const e5 = document.createElement("div"), t5 = e5.style;
              return t5.visibility = "hidden", t5.width = "100px", t5.msOverflowStyle = "scrollbar", t5.overflow = "scroll", e5;
            }(), n3 = function() {
              const e5 = document.createElement("div");
              return e5.style.width = "100%", e5;
            }();
            document.body.appendChild(o3);
            const i2 = o3.offsetWidth;
            o3.appendChild(n3);
            const s2 = n3.offsetWidth;
            document.body.removeChild(o3);
            const r2 = i2 - s2;
            return t4 || localStorage.setItem(v, r2.toString()), r2;
          }(e3), n2 && t3.initializeAndOpenLightbox();
        }
        let qe;
        var Ye = { props: { toggler: Boolean, sources: Array, slide: Number, source: String, sourceIndex: Number, onOpen: Function, onClose: Function, onInit: Function, onShow: Function, disableLocalStorage: Boolean, types: Array, type: String, customAttributes: Array, maxYoutubeVideoDimensions: Object, loadOnlyCurrentSource: Boolean, slideDistance: { type: Number, default: 0.3 }, openOnMount: Boolean, exitFullscreenOnClose: Boolean }, components: { SlideButtons: (0, G.Z)(Xe, [["render", function(t3, o2, n2, i2, s2, r2) {
          const c2 = (0, e2.resolveComponent)("SlideButton");
          return s2.sourcesCount > 1 ? ((0, e2.openBlock)(), (0, e2.createElementBlock)("div", Ve, [(0, e2.createVNode)(c2, { "on-click": s2.changeToPrevious, name: "previous", d: "M18.271,9.212H3.615l4.184-4.184c0.306-0.306,0.306-0.801,0-1.107c-0.306-0.306-0.801-0.306-1.107,0L1.21,9.403C1.194,9.417,1.174,9.421,1.158,9.437c-0.181,0.181-0.242,0.425-0.209,0.66c0.005,0.038,0.012,0.071,0.022,0.109c0.028,0.098,0.075,0.188,0.142,0.271c0.021,0.026,0.021,0.061,0.045,0.085c0.015,0.016,0.034,0.02,0.05,0.033l5.484,5.483c0.306,0.307,0.801,0.307,1.107,0c0.306-0.305,0.306-0.801,0-1.105l-4.184-4.185h14.656c0.436,0,0.788-0.353,0.788-0.788S18.707,9.212,18.271,9.212z" }, null, 8, ["on-click"]), (0, e2.createVNode)(c2, { "on-click": s2.changeToNext, name: "next", d: "M1.729,9.212h14.656l-4.184-4.184c-0.307-0.306-0.307-0.801,0-1.107c0.305-0.306,0.801-0.306,1.106,0l5.481,5.482c0.018,0.014,0.037,0.019,0.053,0.034c0.181,0.181,0.242,0.425,0.209,0.66c-0.004,0.038-0.012,0.071-0.021,0.109c-0.028,0.098-0.075,0.188-0.143,0.271c-0.021,0.026-0.021,0.061-0.045,0.085c-0.015,0.016-0.034,0.02-0.051,0.033l-5.483,5.483c-0.306,0.307-0.802,0.307-1.106,0c-0.307-0.305-0.307-0.801,0-1.105l4.184-4.185H1.729c-0.436,0-0.788-0.353-0.788-0.788S1.293,9.212,1.729,9.212z" }, null, 8, ["on-click"])])) : (0, e2.createCommentVNode)("v-if", true);
        }]]), SourceWrappersContainer: Me, Naver: ge, SlideSwipingHoverer: (0, G.Z)(je, [["render", function(t3, o2, n2, i2, s2, r2) {
          return s2.isSlideSwipingHovererShown ? ((0, e2.openBlock)(), (0, e2.createElementBlock)("div", Ze)) : (0, e2.createCommentVNode)("v-if", true);
        }]]) }, data: () => ({ isOpen: false }), watch: { slide: function() {
          m[this.fsLightboxIndex].core.lightboxUpdater.handleSlideProp();
        }, sourceIndex: function() {
          m[this.fsLightboxIndex].core.lightboxUpdater.handleSlideProp();
        }, source: function() {
          m[this.fsLightboxIndex].core.lightboxUpdater.handleSlideProp();
        }, toggler: function() {
          m[this.fsLightboxIndex].core.lightboxUpdater.handleSlideProp(), m[this.fsLightboxIndex].core.lightboxUpdater.handleTogglerUpdate();
        } }, created() {
          this.fsLightboxIndex = m.push(new j(this)) - 1;
          const e3 = m[this.fsLightboxIndex].componentsServices.isLightboxOpenManager;
          e3.get = () => this.isOpen, e3.set = (e4, t3) => {
            this.isOpen = e4, t3 && (qe = t3);
          };
        }, mounted() {
          m[this.fsLightboxIndex].elements.container = this.$refs.container, $e(m[this.fsLightboxIndex]);
        }, updated() {
          m[this.fsLightboxIndex].elements.container = this.$refs.container, qe && qe(), qe = null;
        } }, _e = (0, G.Z)(Ye, [["render", function(o2, n2, i2, s2, r2, c2) {
          const l2 = (0, e2.resolveComponent)("Naver"), a2 = (0, e2.resolveComponent)("SourceWrappersContainer"), d2 = (0, e2.resolveComponent)("SlideButtons"), u2 = (0, e2.resolveComponent)("SlideSwipingHoverer");
          return r2.isOpen ? ((0, e2.openBlock)(), (0, e2.createElementBlock)("div", t2, [(0, e2.createVNode)(l2, { "fs-lightbox-index": this.fsLightboxIndex }, null, 8, ["fs-lightbox-index"]), (0, e2.createVNode)(a2, { "fs-lightbox-index": this.fsLightboxIndex }, null, 8, ["fs-lightbox-index"]), (0, e2.createVNode)(d2, { "fs-lightbox-index": this.fsLightboxIndex }, null, 8, ["fs-lightbox-index"]), (0, e2.createVNode)(u2, { "fs-lightbox-index": this.fsLightboxIndex }, null, 8, ["fs-lightbox-index"])], 512)) : (0, e2.createCommentVNode)("v-if", true);
        }]]);
      }(), module.exports = n;
    }();
  }
});

// dep:fslightbox-vue_v3
var fslightbox_vue_v3_default = require_v3();
export {
  fslightbox_vue_v3_default as default
};
//# sourceMappingURL=fslightbox-vue_v3.js.map
