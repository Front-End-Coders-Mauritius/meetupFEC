{
  "version": 3,
  "sources": ["../src/plugins/zoom/lg-zoom-settings.ts", "../src/lg-events.ts", "../src/plugins/zoom/lg-zoom.ts", "dep:lightgallery_plugins_zoom"],
  "sourcesContent": ["export interface ActualSizeIcons {\n    zoomIn: 'lg-zoom-in' | 'lg-actual-size';\n    zoomOut: 'lg-zoom-out' | 'lg-actual-size';\n}\nexport interface ZoomSettings {\n    /**\n     * Value of zoom should be incremented/decremented\n     */\n    scale: number;\n\n    /**\n     * Enable/Disable zoom option\n     */\n    zoom: boolean;\n\n    /**\n     * Enable actual size icon.\n     */\n    actualSize: boolean;\n\n    /**\n     * Once the slide transition is completed, how much time should take zoom plugin to activate\n     * @description Some css styles will be added to the images if zoom is enabled.\n     * So it might conflict if you add any custom styles to the images such as the initial transition while opening the gallery.\n     * So you can delay adding zoom related styles to the images by changing the value of enableZoomAfter.\n     */\n    enableZoomAfter: number;\n\n    /**\n     * Show zoom in, zoom out icons\n     */\n    showZoomInOutIcons: boolean;\n\n    /**\n     * Actual size icons classnames.\n     * Specify classnames for both ZoomIn and ZoomOut states\n     * You can use `actualSizeIcons: { zoomIn: 'lg-actual-size', zoomOut: 'lg-zoom-out' }`\n     * to show actual size icons instead of zoom in and zoom out icons.\n     */\n    actualSizeIcons: ActualSizeIcons;\n}\n\nexport const zoomSettings: ZoomSettings = {\n    scale: 1,\n    zoom: true,\n    actualSize: true,\n    showZoomInOutIcons: false,\n    actualSizeIcons: {\n        zoomIn: 'lg-zoom-in',\n        zoomOut: 'lg-zoom-out',\n    } as ActualSizeIcons,\n    enableZoomAfter: 300,\n};\n", "import { LightGallery } from './lightgallery';\nimport { VideoSource } from './plugins/video/types';\n\n/**\n * List of lightGallery events\n * All events should be documented here\n * Below interfaces are used to build the website documentations\n * */\nexport const lGEvents: {\n    [key: string]: string;\n} = {\n    afterAppendSlide: 'lgAfterAppendSlide',\n    init: 'lgInit',\n    hasVideo: 'lgHasVideo',\n    containerResize: 'lgContainerResize',\n    updateSlides: 'lgUpdateSlides',\n    afterAppendSubHtml: 'lgAfterAppendSubHtml',\n    beforeOpen: 'lgBeforeOpen',\n    afterOpen: 'lgAfterOpen',\n    slideItemLoad: 'lgSlideItemLoad',\n    beforeSlide: 'lgBeforeSlide',\n    afterSlide: 'lgAfterSlide',\n    posterClick: 'lgPosterClick',\n    dragStart: 'lgDragStart',\n    dragMove: 'lgDragMove',\n    dragEnd: 'lgDragEnd',\n    beforeNextSlide: 'lgBeforeNextSlide',\n    beforePrevSlide: 'lgBeforePrevSlide',\n    beforeClose: 'lgBeforeClose',\n    afterClose: 'lgAfterClose',\n    rotateLeft: 'lgRotateLeft',\n    rotateRight: 'lgRotateRight',\n    flipHorizontal: 'lgFlipHorizontal',\n    flipVertical: 'lgFlipVertical',\n};\n\n/**\n * Fired only once when lightGallery is initialized\n * @name lgInit\n * @method onInit\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action on lightGallery initialization.\n *   // Init event returns the plugin instance that can be used to call any lightGalley public method\n *   let pluginInstance = null;\n *   lg.addEventListener('lgInit', (event) => {\n *      pluginInstance = event.detail.instance;\n *   });\n *   lightGallery(lg);\n * @see <a href=\"/docs/methods\">Methods<a>\n */\nexport interface InitDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired when the slide content has been inserted into it's slide container.\n * @name lgAfterAppendSlide\n * @method onAfterAppendSlide\n */\nexport interface AfterAppendSlideEventDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired immediately before opening the gallery\n * @name lgBeforeOpen\n * @method onBeforeOpen\n */\nexport interface BeforeOpenDetail {}\n\n/**\n * Fired immediately after opening the gallery\n * @name lgAfterOpen\n * @method onAfterOpen\n */\nexport interface AfterOpenDetail {}\n\n/**\n * Fired once the media inside the slide has been completely loaded .\n * @name lgSlideItemLoad\n * @method onSlideItemLoad\n */\nexport interface SlideItemLoadDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * For the first slide, lightGallery adds some delay for displaying the loaded slide item.\n     * This delay is required for the transition effect when the slide item is displayed\n     * Respect the delay when you use this event\n     */\n    delay: number;\n\n    // Will be true for the first slide\n    isFirstSlide: boolean;\n}\n\n/**\n * Fired immediately before each slide transition.\n * @name lgBeforeSlide\n * @method onBeforeSlide\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action before each slide transition\n *   lg.addEventListener('lgBeforeSlide', (event) => {\n *       const { index, prevIndex } = event.detail;\n *       alert(index, prevIndex);\n *   });\n *   lightGallery(lg);\n */\nexport interface BeforeSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired immediately after each slide transition.\n * @name lgAfterSlide\n * @method onAfterSlide\n */\nexport interface AfterSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired when the video poster is clicked.\n * @name lgPosterClick\n * @method onPosterClick\n */\nexport interface PosterClickDetail {}\n\n/**\n * Fired when the drag event to move to different slide starts.\n * @name lgDragStart\n * @method onDragStart\n */\nexport interface DragStartDetail {}\n\n/**\n * Fired periodically during the drag operation.\n * @name lgDragMove\n * @method onDragMove\n */\nexport interface DragMoveDetail {}\n\n/**\n * Fired when the user has finished the drag operation\n * @name lgDragEnd\n * @method onDragEnd\n */\nexport interface DragEndDetail {}\n\n/**\n * Fired immediately before the start of the close process.\n * @name lgBeforeClose\n * @method onBeforeClose\n */\nexport interface BeforeCloseDetail {}\n\n/**\n * Fired immediately once lightGallery is closed.\n * @name lgAfterClose\n * @method onAfterClose\n */\nexport interface AfterCloseDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired immediately before each \"next\" slide transition\n * @name lgBeforeNextSlide\n * @method onBeforeNextSlide\n */\nexport interface BeforeNextSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired immediately before each \"prev\" slide transition\n * @name lgBeforePrevSlide\n * @method onBeforePrevSlide\n */\nexport interface BeforePrevSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired when the sub-html content (ex : title/ description) has been appended into the slide.\n * @name lgAfterAppendSubHtml\n * @method onAfterAppendSubHtml\n */\nexport interface AfterAppendSubHtmlDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the lightGallery container has been resized.\n * @name lgContainerResize\n * @method onContainerResize\n */\nexport interface ContainerResizeDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when lightGallery detects video slide\n * @name lgHasVideo\n * @method onHasVideo\n */\nexport interface HasVideoDetail {\n    /**\n     * Index of the slide,\n     */\n    index: number;\n    /**\n     * Video source\n     */\n    src: string;\n    /**\n     * HTML5 video source if available\n     * <p>\n       HTML5 video source = source: {\n            src: string;\n            type: string;\n        }[];\n        attributes: HTMLVideoElement;\n     * </p>\n     */\n    html5Video: VideoSource;\n    /**\n     * True if video has poster\n     */\n    hasPoster: boolean;\n}\n", "import { ZoomSettings, zoomSettings } from './lg-zoom-settings';\nimport { LgQuery, lgQuery } from '../../lgQuery';\nimport { LightGallery } from '../../lightgallery';\nimport { lGEvents } from '../../lg-events';\n\ninterface Coords {\n    x: number;\n    y: number;\n}\n\ninterface DragAllowedAxises {\n    allowX: boolean;\n    allowY: boolean;\n}\ninterface ZoomTouchEvent {\n    pageX: number;\n    targetTouches: { pageY: number; pageX: number }[];\n    pageY: number;\n}\ninterface PossibleCords {\n    minX: number;\n    minY: number;\n    maxX: number;\n    maxY: number;\n}\nexport default class Zoom {\n    private core: LightGallery;\n    private settings: ZoomSettings;\n    private $LG!: LgQuery;\n    zoomableTimeout: any;\n    positionChanged!: boolean;\n    pageX!: number;\n    pageY!: number;\n    scale!: number;\n\n    imageYSize!: number;\n    imageXSize!: number;\n    containerRect!: ClientRect;\n    rotateValue!: number;\n    modifierX!: number;\n    modifierY!: number;\n    dragAllowedAxises!: DragAllowedAxises;\n    top!: number;\n    left!: number;\n    scrollTop!: number;\n    constructor(instance: LightGallery, $LG: LgQuery) {\n        // get lightGallery core plugin instance\n        this.core = instance;\n        this.$LG = $LG;\n\n        this.settings = { ...zoomSettings, ...this.core.settings };\n\n        return this;\n    }\n\n    // Append Zoom controls. Actual size, Zoom-in, Zoom-out\n    buildTemplates(): void {\n        let zoomIcons = this.settings.showZoomInOutIcons\n            ? `<button id=\"${this.core.getIdName(\n                  'lg-zoom-in',\n              )}\" type=\"button\" aria-label=\"Zoom in\" class=\"lg-zoom-in lg-icon\"></button><button id=\"${this.core.getIdName(\n                  'lg-zoom-out',\n              )}\" type=\"button\" aria-label=\"Zoom out\" class=\"lg-zoom-out lg-icon\"></button>`\n            : '';\n\n        if (this.settings.actualSize) {\n            zoomIcons += `<button id=\"${this.core.getIdName(\n                'lg-actual-size',\n            )}\" type=\"button\" aria-label=\"View actual size\" class=\"${\n                this.settings.actualSizeIcons.zoomIn\n            } lg-icon\"></button>`;\n        }\n\n        this.core.outer.addClass('lg-use-transition-for-zoom');\n\n        this.core.$toolbar.first().append(zoomIcons);\n    }\n\n    /**\n     * @desc Enable zoom option only once the image is completely loaded\n     * If zoomFromOrigin is true, Zoom is enabled once the dummy image has been inserted\n     *\n     * Zoom styles are defined under lg-zoomable CSS class.\n     */\n    enableZoom(event: CustomEvent): void {\n        // delay will be 0 except first time\n        let _speed = this.settings.enableZoomAfter + event.detail.delay;\n\n        // set _speed value 0 if gallery opened from direct url and if it is first slide\n        if (\n            this.$LG('body').first().hasClass('lg-from-hash') &&\n            event.detail.delay\n        ) {\n            // will execute only once\n            _speed = 0;\n        } else {\n            // Remove lg-from-hash to enable starting animation.\n            this.$LG('body').first().removeClass('lg-from-hash');\n        }\n\n        this.zoomableTimeout = setTimeout(() => {\n            if (!this.isImageSlide()) {\n                return;\n            }\n            this.core.getSlideItem(event.detail.index).addClass('lg-zoomable');\n            if (event.detail.index === this.core.index) {\n                this.setZoomEssentials();\n            }\n        }, _speed + 30);\n    }\n\n    enableZoomOnSlideItemLoad(): void {\n        // Add zoomable class\n        this.core.LGel.on(\n            `${lGEvents.slideItemLoad}.zoom`,\n            this.enableZoom.bind(this),\n        );\n    }\n\n    getModifier(rotateValue: number, axis: string, el: HTMLElement): number {\n        const originalRotate = rotateValue;\n        rotateValue = Math.abs(rotateValue);\n        const transformValues = this.getCurrentTransform(el);\n        if (!transformValues) {\n            return 1;\n        }\n        let modifier = 1;\n        if (axis === 'X') {\n            const flipHorizontalValue = Math.sign(\n                parseFloat(transformValues[0]),\n            );\n            if (rotateValue === 0 || rotateValue === 180) {\n                modifier = 1;\n            } else if (rotateValue === 90) {\n                if (\n                    (originalRotate === -90 && flipHorizontalValue === 1) ||\n                    (originalRotate === 90 && flipHorizontalValue === -1)\n                ) {\n                    modifier = -1;\n                } else {\n                    modifier = 1;\n                }\n            }\n            modifier = modifier * flipHorizontalValue;\n        } else {\n            const flipVerticalValue = Math.sign(parseFloat(transformValues[3]));\n            if (rotateValue === 0 || rotateValue === 180) {\n                modifier = 1;\n            } else if (rotateValue === 90) {\n                const sinX = parseFloat(transformValues[1]);\n                const sinMinusX = parseFloat(transformValues[2]);\n                modifier = Math.sign(\n                    sinX * sinMinusX * originalRotate * flipVerticalValue,\n                );\n            }\n            modifier = modifier * flipVerticalValue;\n        }\n        return modifier;\n    }\n\n    getImageSize(\n        $image: HTMLImageElement,\n        rotateValue: number,\n        axis: string,\n    ): number {\n        const imageSizes: {\n            [key: string]: string;\n        } = {\n            y: 'offsetHeight',\n            x: 'offsetWidth',\n        };\n        if (Math.abs(rotateValue) === 90) {\n            // Swap axis\n            if (axis === 'x') {\n                axis = 'y';\n            } else {\n                axis = 'x';\n            }\n        }\n        return (($image as unknown) as any)[imageSizes[axis]];\n    }\n\n    getDragCords(e: MouseEvent, rotateValue: number): Coords {\n        if (rotateValue === 90) {\n            return {\n                x: e.pageY,\n                y: e.pageX,\n            };\n        } else {\n            return {\n                x: e.pageX,\n                y: e.pageY,\n            };\n        }\n    }\n    getSwipeCords(e: TouchEvent, rotateValue: number): Coords {\n        const x = e.targetTouches[0].pageX;\n        const y = e.targetTouches[0].pageY;\n        if (rotateValue === 90) {\n            return {\n                x: y,\n                y: x,\n            };\n        } else {\n            return {\n                x: x,\n                y: y,\n            };\n        }\n    }\n\n    getDragAllowedAxises(\n        rotateValue: number,\n        scale?: number,\n    ): DragAllowedAxises {\n        scale = scale || this.scale || 1;\n        const allowY = this.imageYSize * scale > this.containerRect.height;\n        const allowX = this.imageXSize * scale > this.containerRect.width;\n        if (rotateValue === 90) {\n            return {\n                allowX: allowY,\n                allowY: allowX,\n            };\n        } else {\n            return {\n                allowX: allowX,\n                allowY: allowY,\n            };\n        }\n    }\n\n    /**\n     *\n     * @param {Element} el\n     * @return matrix(cos(X), sin(X), -sin(X), cos(X), 0, 0);\n     * Get the current transform value\n     */\n    getCurrentTransform(el: HTMLElement): string[] | undefined {\n        if (!el) {\n            return;\n        }\n        const st = window.getComputedStyle(el, null);\n        const tm =\n            st.getPropertyValue('-webkit-transform') ||\n            st.getPropertyValue('-moz-transform') ||\n            st.getPropertyValue('-ms-transform') ||\n            st.getPropertyValue('-o-transform') ||\n            st.getPropertyValue('transform') ||\n            'none';\n        if (tm !== 'none') {\n            return tm.split('(')[1].split(')')[0].split(',');\n        }\n        return;\n    }\n\n    getCurrentRotation(el: HTMLElement): number {\n        if (!el) {\n            return 0;\n        }\n        const values: string[] | undefined = this.getCurrentTransform(el);\n        if (values) {\n            return Math.round(\n                Math.atan2(parseFloat(values[1]), parseFloat(values[0])) *\n                    (180 / Math.PI),\n            );\n            // If you want rotate in 360\n            //return (angle < 0 ? angle + 360 : angle);\n        }\n        return 0;\n    }\n\n    setZoomEssentials(): void {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first();\n\n        const rotateEl = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-rotate')\n            .first()\n            .get();\n        this.rotateValue = this.getCurrentRotation(rotateEl);\n\n        this.imageYSize = this.getImageSize(\n            $image.get() as HTMLImageElement,\n            this.rotateValue,\n            'y',\n        );\n        this.imageXSize = this.getImageSize(\n            $image.get() as HTMLImageElement,\n            this.rotateValue,\n            'x',\n        );\n        this.containerRect = this.core.outer.get().getBoundingClientRect();\n\n        this.modifierX = this.getModifier(this.rotateValue, 'X', rotateEl);\n        this.modifierY = this.getModifier(this.rotateValue, 'Y', rotateEl);\n    }\n\n    /**\n     * @desc Image zoom\n     * Translate the wrap and scale the image to get better user experience\n     *\n     * @param {String} scale - Zoom decrement/increment value\n     */\n    zoomImage(scale: number): void {\n        // Find offset manually to avoid issue after zoom\n        const offsetX =\n            (this.containerRect.width - this.imageXSize) / 2 +\n            this.containerRect.left;\n\n        const { top, bottom } = this.core.mediaContainerPosition;\n        const topBottomSpacing = Math.abs(top - bottom) / 2;\n\n        const offsetY =\n            (this.containerRect.height -\n                this.imageYSize -\n                topBottomSpacing * this.modifierX) /\n                2 +\n            this.scrollTop +\n            this.containerRect.top;\n\n        let originalX;\n        let originalY;\n\n        if (scale === 1) {\n            this.positionChanged = false;\n        }\n\n        const dragAllowedAxises = this.getDragAllowedAxises(\n            Math.abs(this.rotateValue),\n            scale,\n        );\n\n        const { allowY, allowX } = dragAllowedAxises;\n        if (this.positionChanged) {\n            originalX = this.left / (this.scale - 1);\n            originalY = this.top / (this.scale - 1);\n            this.pageX = Math.abs(originalX) + offsetX;\n            this.pageY = Math.abs(originalY) + offsetY;\n\n            this.positionChanged = false;\n        }\n\n        const possibleSwipeCords = this.getPossibleSwipeDragCords(\n            this.rotateValue,\n            scale,\n        );\n\n        const _x = offsetX - this.pageX;\n        const _y = offsetY - this.pageY;\n\n        let x = (scale - 1) * _x;\n        let y = (scale - 1) * _y;\n\n        if (allowX) {\n            if (this.isBeyondPossibleLeft(x, possibleSwipeCords.minX)) {\n                x = possibleSwipeCords.minX;\n            } else if (this.isBeyondPossibleRight(x, possibleSwipeCords.maxX)) {\n                x = possibleSwipeCords.maxX;\n            }\n        } else {\n            if (scale > 1) {\n                if (x < possibleSwipeCords.minX) {\n                    x = possibleSwipeCords.minX;\n                } else if (x > possibleSwipeCords.maxX) {\n                    x = possibleSwipeCords.maxX;\n                }\n            }\n        }\n\n        if (allowY) {\n            if (this.isBeyondPossibleTop(y, possibleSwipeCords.minY)) {\n                y = possibleSwipeCords.minY;\n            } else if (\n                this.isBeyondPossibleBottom(y, possibleSwipeCords.maxY)\n            ) {\n                y = possibleSwipeCords.maxY;\n            }\n        } else {\n            // If the translate value based on index of beyond the viewport, utilize the available space to prevent image being cut out\n            if (scale > 1) {\n                //If image goes beyond viewport top, use the minim possible translate value\n                if (y < possibleSwipeCords.minY) {\n                    y = possibleSwipeCords.minY;\n                } else if (y > possibleSwipeCords.maxY) {\n                    y = possibleSwipeCords.maxY;\n                }\n            }\n        }\n\n        this.setZoomStyles({\n            x: x,\n            y: y,\n            scale,\n        });\n    }\n\n    /**\n     * @desc apply scale3d to image and translate to image wrap\n     * @param {style} X,Y and scale\n     */\n    setZoomStyles(style: { x: number; y: number; scale: number }): void {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first();\n        const $dummyImage = this.core.outer\n            .find('.lg-current .lg-dummy-img')\n            .first();\n        const $imageWrap = $image.parent();\n        this.scale = style.scale;\n        $image.css(\n            'transform',\n            'scale3d(' + style.scale + ', ' + style.scale + ', 1)',\n        );\n\n        $dummyImage.css(\n            'transform',\n            'scale3d(' + style.scale + ', ' + style.scale + ', 1)',\n        );\n\n        const transform =\n            'translate3d(' + style.x + 'px, ' + style.y + 'px, 0)';\n        $imageWrap.css('transform', transform);\n\n        this.left = style.x;\n        this.top = style.y;\n    }\n\n    /**\n     * @param index - Index of the current slide\n     * @param event - event will be available only if the function is called on clicking/taping the imags\n     */\n    setActualSize(index: number, event?: ZoomTouchEvent): void {\n        // Allow zoom only on image\n        if (\n            !this.isImageSlide() ||\n            this.core.outer.hasClass('lg-first-slide-loading')\n        ) {\n            return;\n        }\n        const scale = this.getCurrentImageActualSizeScale();\n        if (this.core.outer.hasClass('lg-zoomed')) {\n            this.scale = 1;\n        } else {\n            this.scale = this.getScale(scale);\n        }\n        this.setPageCords(event);\n\n        this.beginZoom(this.scale);\n        this.zoomImage(this.scale);\n\n        setTimeout(() => {\n            this.core.outer.removeClass('lg-grabbing').addClass('lg-grab');\n        }, 10);\n    }\n\n    getNaturalWidth(index: number): number {\n        const $image = this.core.getSlideItem(index).find('.lg-image').first();\n\n        const naturalWidth = this.core.galleryItems[index].width;\n        return naturalWidth\n            ? parseFloat(naturalWidth)\n            : undefined || ($image.get() as any).naturalWidth;\n    }\n\n    getActualSizeScale(naturalWidth: number, width: number): number {\n        let _scale;\n        let scale;\n        if (naturalWidth > width) {\n            _scale = naturalWidth / width;\n            scale = _scale || 2;\n        } else {\n            scale = 1;\n        }\n        return scale;\n    }\n\n    getCurrentImageActualSizeScale(): number {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first();\n        const width = $image.get().offsetWidth;\n        const naturalWidth = this.getNaturalWidth(this.core.index) || width;\n        return this.getActualSizeScale(naturalWidth, width);\n    }\n\n    getPageCords(event?: ZoomTouchEvent): Coords {\n        const cords: Coords = {} as Coords;\n        if (event) {\n            cords.x = event.pageX || event.targetTouches[0].pageX;\n            cords.y = event.pageY || event.targetTouches[0].pageY;\n        } else {\n            const containerRect = this.core.outer.get().getBoundingClientRect();\n            cords.x = containerRect.width / 2 + containerRect.left;\n            cords.y =\n                containerRect.height / 2 + this.scrollTop + containerRect.top;\n        }\n        return cords;\n    }\n\n    setPageCords(event?: ZoomTouchEvent): void {\n        const pageCords = this.getPageCords(event);\n\n        this.pageX = pageCords.x;\n        this.pageY = pageCords.y;\n    }\n\n    // If true, zoomed - in else zoomed out\n    beginZoom(scale: number): boolean {\n        this.core.outer.removeClass('lg-zoom-drag-transition lg-zoom-dragging');\n        if (scale > 1) {\n            this.core.outer.addClass('lg-zoomed');\n            const $actualSize = this.core.getElementById('lg-actual-size');\n            $actualSize\n                .removeClass(this.settings.actualSizeIcons.zoomIn)\n                .addClass(this.settings.actualSizeIcons.zoomOut);\n        } else {\n            this.resetZoom();\n        }\n        return scale > 1;\n    }\n\n    getScale(scale: number): number {\n        const actualSizeScale = this.getCurrentImageActualSizeScale();\n        if (scale < 1) {\n            scale = 1;\n        } else if (scale > actualSizeScale) {\n            scale = actualSizeScale;\n        }\n        return scale;\n    }\n\n    init(): void {\n        if (!this.settings.zoom) {\n            return;\n        }\n        this.buildTemplates();\n        this.enableZoomOnSlideItemLoad();\n\n        let tapped: ReturnType<typeof setTimeout> | null = null;\n\n        this.core.outer.on('dblclick.lg', (event) => {\n            if (!this.$LG(event.target).hasClass('lg-image')) {\n                return;\n            }\n            this.setActualSize(this.core.index, event);\n        });\n\n        this.core.outer.on('touchstart.lg', (event) => {\n            const $target = this.$LG(event.target);\n            if (\n                event.targetTouches.length === 1 &&\n                $target.hasClass('lg-image')\n            ) {\n                if (!tapped) {\n                    tapped = setTimeout(() => {\n                        tapped = null;\n                    }, 300);\n                } else {\n                    clearTimeout(tapped);\n                    tapped = null;\n                    event.preventDefault();\n                    this.setActualSize(this.core.index, event);\n                }\n            }\n        });\n\n        // Update zoom on resize and orientationchange\n        this.core.LGel.on(\n            `${lGEvents.containerResize}.zoom ${lGEvents.rotateRight}.zoom ${lGEvents.rotateLeft}.zoom ${lGEvents.flipHorizontal}.zoom ${lGEvents.flipVertical}.zoom`,\n            () => {\n                if (!this.core.lgOpened || !this.isImageSlide()) return;\n                this.setPageCords();\n                this.setZoomEssentials();\n                this.zoomImage(this.scale);\n            },\n        );\n        // Update zoom on resize and orientationchange\n        this.$LG(window).on(`scroll.lg.zoom.global${this.core.lgId}`, () => {\n            if (!this.core.lgOpened) return;\n            this.scrollTop = this.$LG(window).scrollTop();\n        });\n\n        this.core.getElementById('lg-zoom-out').on('click.lg', () => {\n            if (this.core.outer.find('.lg-current .lg-image').get()) {\n                this.scale -= this.settings.scale;\n\n                this.scale = this.getScale(this.scale);\n                this.beginZoom(this.scale);\n                this.zoomImage(this.scale);\n            }\n        });\n\n        this.core.getElementById('lg-zoom-in').on('click.lg', () => {\n            this.zoomIn();\n        });\n\n        this.core.getElementById('lg-actual-size').on('click.lg', () => {\n            this.setActualSize(this.core.index);\n        });\n\n        this.core.LGel.on(`${lGEvents.beforeOpen}.zoom`, () => {\n            this.core.outer.find('.lg-item').removeClass('lg-zoomable');\n        });\n        this.core.LGel.on(`${lGEvents.afterOpen}.zoom`, () => {\n            this.scrollTop = this.$LG(window).scrollTop();\n\n            // Set the initial value center\n            this.pageX = this.core.outer.width() / 2;\n            this.pageY = this.core.outer.height() / 2 + this.scrollTop;\n\n            this.scale = 1;\n        });\n\n        // Reset zoom on slide change\n        this.core.LGel.on(\n            `${lGEvents.afterSlide}.zoom`,\n            (event: CustomEvent) => {\n                const { prevIndex } = event.detail;\n                this.scale = 1;\n                this.positionChanged = false;\n                this.resetZoom(prevIndex);\n                if (this.isImageSlide()) {\n                    this.setZoomEssentials();\n                }\n            },\n        );\n\n        // Drag option after zoom\n        this.zoomDrag();\n\n        this.pinchZoom();\n\n        this.zoomSwipe();\n\n        // Store the zoomable timeout value just to clear it while closing\n        this.zoomableTimeout = false;\n        this.positionChanged = false;\n    }\n\n    zoomIn(scale?: number): void {\n        // Allow zoom only on image\n        if (!this.isImageSlide()) {\n            return;\n        }\n        if (scale) {\n            this.scale = scale;\n        } else {\n            this.scale += this.settings.scale;\n        }\n\n        this.scale = this.getScale(this.scale);\n        this.beginZoom(this.scale);\n        this.zoomImage(this.scale);\n    }\n\n    // Reset zoom effect\n    resetZoom(index?: number): void {\n        this.core.outer.removeClass('lg-zoomed lg-zoom-drag-transition');\n        const $actualSize = this.core.getElementById('lg-actual-size');\n        const $item = this.core.getSlideItem(\n            index !== undefined ? index : this.core.index,\n        );\n        $actualSize\n            .removeClass(this.settings.actualSizeIcons.zoomOut)\n            .addClass(this.settings.actualSizeIcons.zoomIn);\n        $item.find('.lg-img-wrap').first().removeAttr('style');\n        $item.find('.lg-image').first().removeAttr('style');\n        this.scale = 1;\n        this.left = 0;\n        this.top = 0;\n\n        // Reset pagx pagy values to center\n        this.setPageCords();\n    }\n\n    getTouchDistance(e: TouchEvent): number {\n        return Math.sqrt(\n            (e.targetTouches[0].pageX - e.targetTouches[1].pageX) *\n                (e.targetTouches[0].pageX - e.targetTouches[1].pageX) +\n                (e.targetTouches[0].pageY - e.targetTouches[1].pageY) *\n                    (e.targetTouches[0].pageY - e.targetTouches[1].pageY),\n        );\n    }\n\n    pinchZoom(): void {\n        let startDist = 0;\n        let pinchStarted = false;\n        let initScale = 1;\n\n        let $item = this.core.getSlideItem(this.core.index);\n\n        this.core.$inner.on('touchstart.lg', (e) => {\n            $item = this.core.getSlideItem(this.core.index);\n            if (!this.isImageSlide()) {\n                return;\n            }\n            if (\n                e.targetTouches.length === 2 &&\n                !this.core.outer.hasClass('lg-first-slide-loading') &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                initScale = this.scale || 1;\n                this.core.outer.removeClass(\n                    'lg-zoom-drag-transition lg-zoom-dragging',\n                );\n\n                this.core.touchAction = 'pinch';\n\n                startDist = this.getTouchDistance(e);\n            }\n        });\n\n        this.core.$inner.on('touchmove.lg', (e) => {\n            if (\n                e.targetTouches.length === 2 &&\n                this.core.touchAction === 'pinch' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                e.preventDefault();\n                const endDist = this.getTouchDistance(e);\n\n                const distance = startDist - endDist;\n                if (!pinchStarted && Math.abs(distance) > 5) {\n                    pinchStarted = true;\n                }\n                if (pinchStarted) {\n                    this.scale = Math.max(1, initScale + -distance * 0.008);\n\n                    this.zoomImage(this.scale);\n                }\n            }\n        });\n\n        this.core.$inner.on('touchend.lg', (e) => {\n            if (\n                this.core.touchAction === 'pinch' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                pinchStarted = false;\n                startDist = 0;\n                if (this.scale <= 1) {\n                    this.resetZoom();\n                } else {\n                    this.scale = this.getScale(this.scale);\n                    this.zoomImage(this.scale);\n\n                    this.core.outer.addClass('lg-zoomed');\n                }\n                this.core.touchAction = undefined;\n            }\n        });\n    }\n\n    touchendZoom(\n        startCoords: Coords,\n        endCoords: Coords,\n        allowX: boolean,\n        allowY: boolean,\n        touchDuration: number,\n        rotateValue: number,\n    ): void {\n        let distanceXnew = endCoords.x - startCoords.x;\n        let distanceYnew = endCoords.y - startCoords.y;\n\n        let speedX = Math.abs(distanceXnew) / touchDuration + 1;\n        let speedY = Math.abs(distanceYnew) / touchDuration + 1;\n\n        if (speedX > 2) {\n            speedX += 1;\n        }\n\n        if (speedY > 2) {\n            speedY += 1;\n        }\n\n        distanceXnew = distanceXnew * speedX;\n        distanceYnew = distanceYnew * speedY;\n\n        const _LGel = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-wrap')\n            .first();\n        const distance: Coords = {} as Coords;\n\n        distance.x = this.left + distanceXnew * this.modifierX;\n        distance.y = this.top + distanceYnew * this.modifierY;\n\n        const possibleSwipeCords = this.getPossibleSwipeDragCords(rotateValue);\n\n        if (Math.abs(distanceXnew) > 15 || Math.abs(distanceYnew) > 15) {\n            if (allowY) {\n                if (\n                    this.isBeyondPossibleTop(\n                        distance.y,\n                        possibleSwipeCords.minY,\n                    )\n                ) {\n                    distance.y = possibleSwipeCords.minY;\n                } else if (\n                    this.isBeyondPossibleBottom(\n                        distance.y,\n                        possibleSwipeCords.maxY,\n                    )\n                ) {\n                    distance.y = possibleSwipeCords.maxY;\n                }\n            }\n\n            if (allowX) {\n                if (\n                    this.isBeyondPossibleLeft(\n                        distance.x,\n                        possibleSwipeCords.minX,\n                    )\n                ) {\n                    distance.x = possibleSwipeCords.minX;\n                } else if (\n                    this.isBeyondPossibleRight(\n                        distance.x,\n                        possibleSwipeCords.maxX,\n                    )\n                ) {\n                    distance.x = possibleSwipeCords.maxX;\n                }\n            }\n\n            if (allowY) {\n                this.top = distance.y;\n            } else {\n                distance.y = this.top;\n            }\n\n            if (allowX) {\n                this.left = distance.x;\n            } else {\n                distance.x = this.left;\n            }\n\n            this.setZoomSwipeStyles(_LGel, distance);\n\n            this.positionChanged = true;\n        }\n    }\n\n    getZoomSwipeCords(\n        startCoords: Coords,\n        endCoords: Coords,\n        allowX: boolean,\n        allowY: boolean,\n        possibleSwipeCords: PossibleCords,\n    ): Coords {\n        const distance: Coords = {} as Coords;\n        if (allowY) {\n            distance.y =\n                this.top + (endCoords.y - startCoords.y) * this.modifierY;\n            if (this.isBeyondPossibleTop(distance.y, possibleSwipeCords.minY)) {\n                const diffMinY = possibleSwipeCords.minY - distance.y;\n                distance.y = possibleSwipeCords.minY - diffMinY / 6;\n            } else if (\n                this.isBeyondPossibleBottom(distance.y, possibleSwipeCords.maxY)\n            ) {\n                const diffMaxY = distance.y - possibleSwipeCords.maxY;\n                distance.y = possibleSwipeCords.maxY + diffMaxY / 6;\n            }\n        } else {\n            distance.y = this.top;\n        }\n\n        if (allowX) {\n            distance.x =\n                this.left + (endCoords.x - startCoords.x) * this.modifierX;\n            if (\n                this.isBeyondPossibleLeft(distance.x, possibleSwipeCords.minX)\n            ) {\n                const diffMinX = possibleSwipeCords.minX - distance.x;\n                distance.x = possibleSwipeCords.minX - diffMinX / 6;\n            } else if (\n                this.isBeyondPossibleRight(distance.x, possibleSwipeCords.maxX)\n            ) {\n                const difMaxX = distance.x - possibleSwipeCords.maxX;\n                distance.x = possibleSwipeCords.maxX + difMaxX / 6;\n            }\n        } else {\n            distance.x = this.left;\n        }\n\n        return distance;\n    }\n\n    private isBeyondPossibleLeft(x: number, minX: number) {\n        return x >= minX;\n    }\n    private isBeyondPossibleRight(x: number, maxX: number) {\n        return x <= maxX;\n    }\n    private isBeyondPossibleTop(y: number, minY: number) {\n        return y >= minY;\n    }\n    private isBeyondPossibleBottom(y: number, maxY: number) {\n        return y <= maxY;\n    }\n\n    isImageSlide(): boolean {\n        const currentItem = this.core.galleryItems[this.core.index];\n        return this.core.getSlideType(currentItem) === 'image';\n    }\n\n    getPossibleSwipeDragCords(\n        rotateValue: number,\n        scale?: number,\n    ): PossibleCords {\n        const dataScale = scale || this.scale || 1;\n        const elDataScale = Math.abs(dataScale);\n\n        const { top, bottom } = this.core.mediaContainerPosition;\n\n        const topBottomSpacing = Math.abs(top - bottom) / 2;\n\n        const minY =\n            (this.imageYSize - this.containerRect.height) / 2 +\n            topBottomSpacing * this.modifierX;\n        const maxY =\n            this.containerRect.height - this.imageYSize * elDataScale + minY;\n\n        const minX = (this.imageXSize - this.containerRect.width) / 2;\n\n        const maxX =\n            this.containerRect.width - this.imageXSize * elDataScale + minX;\n\n        let possibleSwipeCords = {\n            minY: minY,\n            maxY: maxY,\n            minX: minX,\n            maxX: maxX,\n        };\n\n        if (Math.abs(rotateValue) === 90) {\n            possibleSwipeCords = {\n                minY: minX,\n                maxY: maxX,\n                minX: minY,\n                maxX: maxY,\n            };\n        }\n\n        return possibleSwipeCords;\n    }\n\n    setZoomSwipeStyles(\n        LGel: lgQuery,\n        distance: { x: number; y: number },\n    ): void {\n        LGel.css(\n            'transform',\n            'translate3d(' + distance.x + 'px, ' + distance.y + 'px, 0)',\n        );\n    }\n\n    zoomSwipe(): void {\n        let startCoords = {} as Coords;\n        let endCoords = {} as Coords;\n        let isMoved = false;\n\n        // Allow x direction drag\n        let allowX = false;\n\n        // Allow Y direction drag\n        let allowY = false;\n\n        let startTime: Date = new Date();\n        let endTime: Date = new Date();\n        let possibleSwipeCords: PossibleCords;\n\n        let _LGel: lgQuery;\n\n        let $item = this.core.getSlideItem(this.core.index);\n\n        this.core.$inner.on('touchstart.lg', (e) => {\n            // Allow zoom only on image\n            if (!this.isImageSlide()) {\n                return;\n            }\n            $item = this.core.getSlideItem(this.core.index);\n            if (\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target)) &&\n                e.targetTouches.length === 1 &&\n                this.core.outer.hasClass('lg-zoomed')\n            ) {\n                e.preventDefault();\n                startTime = new Date();\n                this.core.touchAction = 'zoomSwipe';\n                _LGel = this.core\n                    .getSlideItem(this.core.index)\n                    .find('.lg-img-wrap')\n                    .first();\n\n                const dragAllowedAxises = this.getDragAllowedAxises(\n                    Math.abs(this.rotateValue),\n                );\n\n                allowY = dragAllowedAxises.allowY;\n                allowX = dragAllowedAxises.allowX;\n                if (allowX || allowY) {\n                    startCoords = this.getSwipeCords(\n                        e,\n                        Math.abs(this.rotateValue),\n                    );\n                }\n\n                possibleSwipeCords = this.getPossibleSwipeDragCords(\n                    this.rotateValue,\n                );\n\n                // reset opacity and transition duration\n                this.core.outer.addClass(\n                    'lg-zoom-dragging lg-zoom-drag-transition',\n                );\n            }\n        });\n\n        this.core.$inner.on('touchmove.lg', (e) => {\n            if (\n                e.targetTouches.length === 1 &&\n                this.core.touchAction === 'zoomSwipe' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                e.preventDefault();\n                this.core.touchAction = 'zoomSwipe';\n\n                endCoords = this.getSwipeCords(e, Math.abs(this.rotateValue));\n\n                const distance = this.getZoomSwipeCords(\n                    startCoords,\n                    endCoords,\n                    allowX,\n                    allowY,\n                    possibleSwipeCords,\n                );\n\n                if (\n                    Math.abs(endCoords.x - startCoords.x) > 15 ||\n                    Math.abs(endCoords.y - startCoords.y) > 15\n                ) {\n                    isMoved = true;\n                    this.setZoomSwipeStyles(_LGel, distance);\n                }\n            }\n        });\n\n        this.core.$inner.on('touchend.lg', (e) => {\n            if (\n                this.core.touchAction === 'zoomSwipe' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                this.core.touchAction = undefined;\n                this.core.outer.removeClass('lg-zoom-dragging');\n                if (!isMoved) {\n                    return;\n                }\n                isMoved = false;\n                endTime = new Date();\n                const touchDuration = endTime.valueOf() - startTime.valueOf();\n                this.touchendZoom(\n                    startCoords,\n                    endCoords,\n                    allowX,\n                    allowY,\n                    touchDuration,\n                    this.rotateValue,\n                );\n            }\n        });\n    }\n\n    zoomDrag(): void {\n        let startCoords: Coords = {} as Coords;\n        let endCoords: Coords = {} as Coords;\n        let isDragging = false;\n        let isMoved = false;\n\n        // Allow x direction drag\n        let allowX = false;\n\n        // Allow Y direction drag\n        let allowY = false;\n\n        let startTime: number | Date;\n        let endTime;\n\n        let possibleSwipeCords: PossibleCords;\n\n        let _LGel: lgQuery;\n\n        this.core.outer.on('mousedown.lg.zoom', (e) => {\n            // Allow zoom only on image\n            if (!this.isImageSlide()) {\n                return;\n            }\n            const $item = this.core.getSlideItem(this.core.index);\n            if (\n                this.$LG(e.target).hasClass('lg-item') ||\n                $item.get().contains(e.target)\n            ) {\n                startTime = new Date();\n                _LGel = this.core\n                    .getSlideItem(this.core.index)\n                    .find('.lg-img-wrap')\n                    .first();\n\n                const dragAllowedAxises = this.getDragAllowedAxises(\n                    Math.abs(this.rotateValue),\n                );\n\n                allowY = dragAllowedAxises.allowY;\n                allowX = dragAllowedAxises.allowX;\n\n                if (this.core.outer.hasClass('lg-zoomed')) {\n                    if (\n                        this.$LG(e.target).hasClass('lg-object') &&\n                        (allowX || allowY)\n                    ) {\n                        e.preventDefault();\n                        startCoords = this.getDragCords(\n                            e,\n                            Math.abs(this.rotateValue),\n                        );\n\n                        possibleSwipeCords = this.getPossibleSwipeDragCords(\n                            this.rotateValue,\n                        );\n\n                        isDragging = true;\n\n                        // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\n                        this.core.outer.get().scrollLeft += 1;\n                        this.core.outer.get().scrollLeft -= 1;\n\n                        this.core.outer\n                            .removeClass('lg-grab')\n                            .addClass(\n                                'lg-grabbing lg-zoom-drag-transition lg-zoom-dragging',\n                            );\n                        // reset opacity and transition duration\n                    }\n                }\n            }\n        });\n\n        this.$LG(window).on(\n            `mousemove.lg.zoom.global${this.core.lgId}`,\n            (e) => {\n                if (isDragging) {\n                    isMoved = true;\n                    endCoords = this.getDragCords(\n                        e,\n                        Math.abs(this.rotateValue),\n                    );\n\n                    const distance = this.getZoomSwipeCords(\n                        startCoords,\n                        endCoords,\n                        allowX,\n                        allowY,\n                        possibleSwipeCords,\n                    );\n\n                    this.setZoomSwipeStyles(_LGel, distance);\n                }\n            },\n        );\n\n        this.$LG(window).on(`mouseup.lg.zoom.global${this.core.lgId}`, (e) => {\n            if (isDragging) {\n                endTime = new Date();\n                isDragging = false;\n                this.core.outer.removeClass('lg-zoom-dragging');\n\n                // Fix for chrome mouse move on click\n                if (\n                    isMoved &&\n                    (startCoords.x !== endCoords.x ||\n                        startCoords.y !== endCoords.y)\n                ) {\n                    endCoords = this.getDragCords(\n                        e,\n                        Math.abs(this.rotateValue),\n                    );\n\n                    const touchDuration =\n                        endTime.valueOf() - startTime.valueOf();\n                    this.touchendZoom(\n                        startCoords,\n                        endCoords,\n                        allowX,\n                        allowY,\n                        touchDuration,\n                        this.rotateValue,\n                    );\n                }\n\n                isMoved = false;\n            }\n\n            this.core.outer.removeClass('lg-grabbing').addClass('lg-grab');\n        });\n    }\n\n    closeGallery(): void {\n        this.resetZoom();\n    }\n\n    destroy(): void {\n        // Unbind all events added by lightGallery zoom plugin\n        this.$LG(window).off(`.lg.zoom.global${this.core.lgId}`);\n        this.core.LGel.off('.lg.zoom');\n        this.core.LGel.off('.zoom');\n        clearTimeout(this.zoomableTimeout);\n        this.zoomableTimeout = false;\n    }\n}\n", "import d from \"./node_modules/lightgallery/plugins/zoom/lg-zoom.es5.js\";export default d;"],
  "mappings": "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",
  "names": []
}
